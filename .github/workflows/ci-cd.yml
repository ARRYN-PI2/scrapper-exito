name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION_MAIN: "3.11"
  PYTHON_VERSIONS: '["3.9", "3.10", "3.11", "3.12"]'
  DOCKER_IMAGE_NAME: exito-scraper

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-matrix.outputs.python-versions }}
      python-main: ${{ steps.set-matrix.outputs.python-main }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Read Python versions from .env
      id: set-matrix
      run: |
        # Read Python versions from .env file
        if [ -f .env ]; then
          PYTHON_VERSIONS=$(grep "PYTHON_VERSIONS=" .env | cut -d '=' -f2 | tr -d ' ')
          PYTHON_MAIN=$(grep "PYTHON_VERSION_MAIN=" .env | cut -d '=' -f2)
        else
          # Fallback to default values
          PYTHON_VERSIONS='["3.9", "3.10", "3.11", "3.12"]'
          PYTHON_MAIN="3.11"
        fi
        
        echo "python-versions=$PYTHON_VERSIONS" >> $GITHUB_OUTPUT
        echo "python-main=$PYTHON_MAIN" >> $GITHUB_OUTPUT
        echo "Testing with Python versions: $PYTHON_VERSIONS"
        echo "Main Python version: $PYTHON_MAIN"

  lint-and-format:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ needs.setup.outputs.python-main }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-main }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest pytest-cov
    
    - name: Format check with black
      run: black --check --diff exito_scraper/ *.py
    
    - name: Import sort check with isort
      run: isort --check-only --diff exito_scraper/ *.py
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 exito_scraper/ *.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 exito_scraper/ *.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: mypy exito_scraper/ --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Create test data directory
      run: mkdir -p data
    
    - name: Test basic imports
      run: |
        python -c "import exito_scraper; print('✅ Import successful')"
        python -c "from exito_scraper.main import main; print('✅ Main import successful')"
    
    - name: Test CLI help
      run: python -m exito_scraper.main --help
    
    - name: Test scraper configuration
      run: |
        python -c "
        from exito_scraper.config import EXPECTED_URLS, DEFAULT_HEADERS
        print('✅ Configuration loaded successfully')
        print(f'Supported categories: {list(EXPECTED_URLS.keys())}')
        "
    
    - name: Test utility functions
      run: |
        python -c "
        from exito_scraper.utils.html_formatter import clean_html_details
        test_html = '<p>Test <span>HTML</span> content</p>'
        cleaned = clean_html_details(test_html)
        print(f'✅ HTML cleaner works: {cleaned}')
        "
    
    # Uncomment when you have actual tests
    # - name: Test with pytest
    #   run: |
    #     pytest tests/ -v --cov=exito_scraper --cov-report=xml --cov-report=term
    
    # - name: Upload coverage to Codecov
    #   if: matrix.python-version == needs.setup.outputs.python-main
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ needs.setup.outputs.python-main }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-main }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Security scan with safety
      run: safety check --json || true
    
    - name: Security scan with bandit
      run: bandit -r exito_scraper/ -f json || true

  build-docker:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
    
    - name: Test Docker image
      run: |
        echo "Testing Docker image basic functionality..."
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:latest python -c "import exito_scraper; print('✅ Docker import successful')"
        
        echo "Testing CLI in Docker..."
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:latest python -m exito_scraper.main --help
        
        echo "Testing utility scripts in Docker..."
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:latest python format_json.py --help || echo "Format script help not available"
    
    - name: Test Docker scraper functionality
      run: |
        echo "Testing scraper in Docker (dry run)..."
        docker run --rm -v $(pwd)/data:/app/data ${{ env.DOCKER_IMAGE_NAME }}:latest \
          python -c "
          from exito_scraper.adapters.exito_scraper_adapter import ExitoScraperAdapter
          scraper = ExitoScraperAdapter()
          print('✅ Scraper adapter initialized successfully')
          "
    
    # Uncomment to push to registry
    # - name: Login to Docker Hub
    #   if: github.ref == 'refs/heads/main'
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # - name: Push Docker image
    #   if: github.ref == 'refs/heads/main'
    #   run: |
    #     docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
    #     docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  integration-test:
    runs-on: ubuntu-latest
    needs: [setup, build-docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Test volume mounting
        mkdir -p test_data
        docker run --rm -v $(pwd)/test_data:/app/data ${{ env.DOCKER_IMAGE_NAME }}:test \
          python -c "
          import os
          print('✅ Volume mount test')
          print(f'Data directory exists: {os.path.exists(\"/app/data\")}')
          print(f'Data directory writable: {os.access(\"/app/data\", os.W_OK)}')
          "
        
        # Test configuration loading
        docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:test \
          python -c "
          from exito_scraper.config import EXPECTED_URLS
          assert len(EXPECTED_URLS) > 0, 'No categories configured'
          print(f'✅ Configuration test passed. Categories: {list(EXPECTED_URLS.keys())}')
          "
        
        echo "✅ All integration tests passed!"

  release:
    runs-on: ubuntu-latest
    needs: [setup, test, build-docker, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      run: |
        echo "# Release Notes" > release_notes.md
        echo "" >> release_notes.md
        echo "## Changes in this release:" >> release_notes.md
        git log --oneline --since="1 week ago" >> release_notes.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: release_notes.md
        draft: false
        prerelease: false
